from fastapi import APIRouter, HTTPException, Depends, Path
from sqlalchemy.ext.asyncio import AsyncSession
from app.database import async_session_maker
from app.bookings.schemas import SBookingCreate, SBooking, SMovieInfo, SAvailableSeats, SUserBooking
from app.bookings.dao import BookingDAO
from app.halls.dao import HallDAO
from app.users.dependencies import get_current_user
from app.users.models import Users
from typing import List
from app.movie.dao import MovieDAO
from datetime import datetime
import pytz
from enum import Enum

router = APIRouter(prefix='/bookings', tags=['–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ üé´'])


async def get_available_movie_titles() -> List[str]:
    movies = await MovieDAO.find_all()
    current_time = datetime.now(pytz.UTC)
    return [movie.title for movie in movies if movie.start_time > current_time]

@router.post("/", response_model=SBooking)
async def create_booking(booking: SBookingCreate, current_user: Users = Depends(get_current_user)):
    """
    –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –Ω–∞ —Ñ–∏–ª—å–º.
    
    –ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:
    1. –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ GET /bookings/movies
    2. –í—ã–±–µ—Ä–∏—Ç–µ ID —Ñ–∏–ª—å–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    3. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ GET /bookings/movies/{id}/seats
    4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º ID —Ñ–∏–ª—å–º–∞ –∏ –Ω–æ–º–µ—Ä–æ–º –º–µ—Å—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
    movie = await MovieDAO.find_by_id(booking.movie_id)
    if not movie:
        raise HTTPException(status_code=404, detail="–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    current_time = datetime.now(pytz.UTC)
    if movie.start_time <= current_time:
        raise HTTPException(status_code=400, detail="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º –∑–∞–∫—Ä—ã—Ç–æ")
        
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ª–µ
    hall = await HallDAO.find_by_id(movie.hall_id)
    if not hall:
        raise HTTPException(status_code=404, detail="–ó–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –º–µ—Å—Ç–∞
    if booking.seat_numbers > hall.total_seats:
        raise HTTPException(
            status_code=400, 
            detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞. –í –∑–∞–ª–µ {hall.total_seats} –º–µ—Å—Ç"
        )
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –º–µ—Å—Ç–æ
    booked_seats = await BookingDAO.get_booked_seats(booking.movie_id)
    if booking.seat_numbers in booked_seats:
        raise HTTPException(status_code=400, detail="–≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ")
        
    try:
        # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking_data = {
            "user_id": current_user.id,
            "movie_id": booking.movie_id,
            "seat_numbers": booking.seat_numbers,
            "hall_id": movie.hall_id,
            "status": "confirmed",
            "booking_time": datetime.now()
        }
        
        # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        await BookingDAO.add(**booking_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        created_booking = await BookingDAO.find_one_or_none(
            user_id=current_user.id,
            movie_id=booking.movie_id,
            seat_numbers=booking.seat_numbers,
            hall_id=movie.hall_id,
            status="confirmed"
        )
        
        if not created_booking:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            
        return created_booking
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

@router.get("/movies", response_model=List[SMovieInfo])
async def get_available_movies():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    """
    movies = await MovieDAO.find_all()
    available_movies = []
    
    current_time = datetime.now(pytz.UTC)
    
    for movie in movies:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å–º–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
        if movie.start_time > current_time:
            hall = await HallDAO.find_by_id(movie.hall_id)
            if not hall:
                continue
                
            booked_seats = await BookingDAO.get_booked_seats(movie.id)
            available_seats = hall.total_seats - len(booked_seats)
            
            if available_seats > 0:
                available_movies.append({
                    'id': movie.id,
                    "title": movie.title,
                    "start_time": movie.start_time,
                    "duration": movie.duration,
                    "available_seats": available_seats
                })
    
    return available_movies

@router.get("/movies/{movie_id}/seats", response_model=SAvailableSeats)
async def get_movie_seats(
    movie_id: int = Path(..., description="ID —Ñ–∏–ª—å–º–∞ (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ /bookings/movies)")
):
    movie = await MovieDAO.find_by_id(movie_id)
    if not movie:
        raise HTTPException(status_code=404, detail="–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    current_time = datetime.now(pytz.UTC)
    if movie.start_time <= current_time:
        raise HTTPException(status_code=400, detail="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º –∑–∞–∫—Ä—ã—Ç–æ")
        
    hall = await HallDAO.find_by_id(movie.hall_id)
    if not hall:
        raise HTTPException(status_code=404, detail="–ó–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    booked_seats = await BookingDAO.get_booked_seats(movie_id)
    available_seats = [i for i in range(1, hall.total_seats + 1) if i not in booked_seats]
    
    return {
        "id": movie.id,
        "title": movie.title,
        "start_time": movie.start_time,
        "duration": movie.duration,
        "available_seats": available_seats,
        "total_seats": hall.total_seats
    }

@router.get("/my", response_model=List[SUserBooking])
async def get_my_bookings(current_user: Users = Depends(get_current_user)):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    bookings = await BookingDAO.find_by_user_id(current_user.id)
    result = []
    
    for booking in bookings:
        movie = await MovieDAO.find_by_id(booking.movie_id)
        if movie:
            result.append({
                "movie_title": movie.title,
                "start_time": movie.start_time,
                "seat_number": booking.seat_numbers
            })
    
    return result


